:py:mod:`vexy.sources`
======================

.. py:module:: vexy.sources


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   ossindex/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   vexy.sources.BaseSource
   vexy.sources.OssIndexSource




Attributes
~~~~~~~~~~

.. autoapisummary::

   vexy.sources.ALL_SOURCES


.. py:class:: BaseSource(*, config: Optional[Dict[str, Any]] = None)

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: process_components(self, *, components: Iterable[cyclonedx.model.component.Component]) -> None


   .. py:method:: all_components(self) -> Set[cyclonedx.model.component.Component]
      :property:


   .. py:method:: valid_components(self) -> Set[cyclonedx.model.component.Component]
      :property:


   .. py:method:: get_vulnerabilities(self) -> Set[cyclonedx.model.vulnerability.Vulnerability]
      :abstractmethod:


   .. py:method:: _component_complete_for_source(self, *, component: cyclonedx.model.component.Component) -> bool
      :abstractmethod:

      Whether the given Component has enough data (the right fields) for us to query this data source for known
      vulnerabilities.

      :param component: Component
      :return: bool


   .. py:method:: _configure_source(self, *, config: Dict[str, Any]) -> None
      :abstractmethod:

      Perform any source specific configuration such as authentication.

      :param config: Dict[str, Any]
      :return: None


   .. py:method:: source() -> cyclonedx.model.vulnerability.VulnerabilitySource
      :staticmethod:
      :abstractmethod:

      Instance that represents this data source.

      :return: VulnerabilitySource


   .. py:method:: source_name() -> str
      :staticmethod:
      :abstractmethod:

      Human-friendly name for this data source.

      :return: str


   .. py:method:: source_description() -> str
      :staticmethod:
      :abstractmethod:

      Human-friendly description of this data source.

      :return: str


   .. py:method:: source_ecosystems() -> Set[vexy.EcoSystem]
      :staticmethod:
      :abstractmethod:

      Which ecosystems this source has vulnerability data for.

      :return: Set[str]


   .. py:method:: source_url() -> str
      :staticmethod:
      :abstractmethod:

      Public URL for this data source

      :return: str



.. py:class:: OssIndexSource(*, config: Optional[Dict[str, Any]] = None)

   Bases: :py:obj:`vexy.sources.base.BaseSource`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: _component_complete_for_source(self, component: cyclonedx.model.component.Component) -> bool

      Whether the given Component has enough data (the right fields) for us to query this data source for known
      vulnerabilities.

      :param component: Component
      :return: bool


   .. py:method:: _configure_source(self, config: Dict[str, Any]) -> None

      Perform any source specific configuration such as authentication.

      :param config: Dict[str, Any]
      :return: None


   .. py:method:: get_vulnerabilities(self) -> Set[cyclonedx.model.vulnerability.Vulnerability]


   .. py:method:: source() -> cyclonedx.model.vulnerability.VulnerabilitySource
      :staticmethod:

      Instance that represents this data source.

      :return: VulnerabilitySource


   .. py:method:: source_name() -> str
      :staticmethod:

      Human-friendly name for this data source.

      :return: str


   .. py:method:: source_description() -> str
      :staticmethod:

      Human-friendly description of this data source.

      :return: str


   .. py:method:: source_ecosystems() -> Set[vexy.EcoSystem]
      :staticmethod:

      Which ecosystems this source has vulnerability data for.

      :return: Set[str]


   .. py:method:: source_url() -> str
      :staticmethod:

      Public URL for this data source

      :return: str



.. py:data:: ALL_SOURCES
   :annotation: :Dict[str, Type[base.BaseSource]]

   

